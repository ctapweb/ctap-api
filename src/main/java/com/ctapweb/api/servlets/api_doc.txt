Version: v1


For administration:

Access to the following resources all require admin priviledge, which should be passed in with the header:

	/admin/db/
	GET, lists all the tables in db
		curl -i -X GET http://localhost:8080/v1/admin/db/ --user admin@ctapweb.com:admin
		
	POST, creates all the tables in db
		curl -i -X POST http://localhost:8080/v1/admin/db/ --user admin@ctapweb.com:admin
		
	DELETE, deletes all tables in db
		curl -i -X DELETE http://localhost:8080/v1/admin/db/ --user admin@ctapweb.com:admin

	PUT, reinitializes the db, which means dropping all tables and recreating them.
		curl -i -X PUT http://localhost:8080/v1/admin/db/ --user admin@ctapweb.com:admin
		
	/admin/measures/
	POST, imports all the measures. If measures already exist, update their descriptions.
		curl -i -X POST http://localhost:8080/v1/admin/measures/ --user admin@ctapweb.com:admin
	
	PUT, cleans measures so that the db matches the class annotations 
		curl -i -X PUT http://localhost:8080/v1/admin/measures/ --user admin@ctapweb.com:admin
		
	/admin/categories/
	GET, same as GET /categories/, but with more information
		curl -i -X GET http://localhost:8080/v1/admin/categories/ --user admin@ctapweb.com:admin	
	

User operations:
	Except for new user sign up by POSTing to /users/, all the other operations require authentication.

	/users/
	POST, creates a new user  
		echo '{"firstName": "myFirstName", "lastName": "myLastName", "institution": "University of the Universe", "email": "user@example.com", "passwd": "myPassword" }' | curl -iX POST -d @- http://localhost:8080/v1/users/ --header "Content-Type:application/json"
	/users/passwords/?[user=account@exmaple.com]
	PUT, resets password, returns the new password by email
		echo '{"email": "user@example.com"}' | curl -iX PUT -d @- http://localhost:8080/v1/users/passwords/

	/user/
	GET, lists the user info
		curl -i -X GET http://localhost:8080/v1/user/ --user user@example.com:myPassword
		If user has already been authenticated, use sessionId for authorization
		curl -i -X GET http://localhost:8080/v1/user/ --cookie "JSESSIONID=1lpyxyzyq69uh5e41lr9xedr2"
	PUT, updates user info, need to check user credentials
		echo '{"firstName": "newFirstName", "lastName": "newLastName", "institution": "new institution"}' | curl -iX PUT -d @- http://localhost:8080/v1/user/ --header "Content-Type:application/json" --user user@example.com:myPassword 
	
	/user/passwd/
	PUT, updates user password, need to check user principal
		echo '["oldPasswd", "newPasswd"]' | curl -iX PUT -d @- http://localhost:8080/v1/user/passwd/ --header "Content-Type:application/json" --user user@example.com:myPassword
		
	/user/login/
	GET, authenticate the user with sent-in user info, further request can send in returned JSESSIONID for authorization
		curl -i -X GET http://localhost:8080/v1/user/login/ --user user@example.com:myPassword
		or 
		curl -i -X GET  http://localhost:8080/v1/user/login/ --cookie 'JSESSIONID=1956aio6vv5mv13cx3o1gmzj9a'

	DELETE, log out the user
		curl -i -X DELETE http://localhost:8080/v1/user/login/ --cookie 'JSESSIONID=1956aio6vv5mv13cx3o1gmzj9a'
		or
		curl -i -X DELETE http://localhost:8080/v1/user/login/ --user user@example.com:myPassword
		
	
Corpus operations:
	/corpora/
	GET, lists information of all corpora, requires user authentication
		curl -i -X GET http://localhost:8080/v1/corpora/ --user user@example.com:myPassword

	POST, creates a new corpus, returns a link to the corpus
		echo '{"name": "corpus 1", "description": "description of corpus 1"}' | curl -iX POST -d @- http://localhost:8080/v1/corpora/ --header "Content-Type:application/json" --user user@example.com:myPassword
		
	PUT, changes the corpus info
		echo '{"id": 1, "name": "new corpus 1 name", "description": "new description of corpus 1"}' | curl -i -X PUT -d @- http://localhost:8080/v1/corpora/ --user user@example.com:myPassword
		
	DELETE, deletes a corpus
		echo '{"id": 1}' | curl -i -X DELETE -d @- http://localhost:8080/v1/corpora/ --user user@example.com:myPassword
	
	/corpora/[id]: dispatched to /coporpa/id/[id]
	GET, gets info of a specific corpus
		curl -i -X GET http://localhost:8080/v1/corpora/2 --user user@example.com:myPassword
	
	PUT, change the corpus info: name, description
		echo '{"name": "new corpus 1 name", "description": "new description of corpus 1"}' | curl -i -X PUT -d @- http://localhost:8080/v1/corpora/1 --user user@example.com:myPassword

	DELETE, remove the corpus
		curl -i -X DELETE http://localhost:8080/v1/corpora/1 --user user@example.com:myPassword
	
Tag operations:
	/tags/
	GET, lists all the tags of the user
		 curl -iX GET http://localhost:8080/v1/tags/ --user user@example.com:myPassword 

	POST, inserts a new tag
		echo '{"corpusId": 4, "name": "a tag name"}' | curl -iX POST -d @- http://localhost:8080/v1/tags/ --user user@example.com:myPassword  

	PUT, only forwards to /tags/id/[id]
	DELETE, only forwards to /tags/id/[id]
	
	/tags/corpus/[corpus_id]
	GET, lists all the tags of a corpus
		 curl -iX GET http://localhost:8080/v1/tags/corpus/1 --user user@example.com:myPassword 
	
	POST, inserts a new tag to the corpus
		echo '{"name": "a tag name"}' | curl -iX POST -d @- http://localhost:8080/v1/tags/corpus/1 --user user@example.com:myPassword  
	
	/tags/[id]: dispatched to /tags/id/[id]

	GET, gets the tag name
		 curl -iX GET http://localhost:8080/v1/tags/1 --user user@example.com:myPassword 

	PUT, changes the tag name
		echo '{"name": "new name"}' | curl -iX PUT -d @- http://localhost:8080/v1/tags/7 --user user@example.com:myPassword

	DELETE, deletes the tag
		curl -iX DELETE http://localhost:8080/v1/tags/7 --user user@example.com:myPassword
	
Text operations:

	/texts/
	DELETE, deletes multiple texts, if url suffixed by text id, forward to /texts/id/[id]
		echo '[{"id": 10}, {"id":11}]' | curl -iX DELETE -d @- http://localhost:8080/v1/texts/ --user user@example.com:myPassword  

	GET, only forward to /texts/id/[id]
		curl -iX GET http://localhost:8080/v1/texts/4 --user user@example.com:myPassword 
	
	PUT, only forward to /texts/id/[id]
		echo '{"title": "updated title", "tagId": 9, "content": "updated Content"}' | curl -iX PUT -d @- http://localhost:8080/v1/texts/4 --user user@example.com:myPassword

	/texts/corpus/[corpus_id]
	GET, lists all the texts in the corpus
		curl -iX GET http://localhost:8080/v1/texts/corpus/4 --user user@example.com:myPassword
	POST, adds a text to the corpus
		echo '{"corpusId":4, "title":"new text 1", "content": "new text content 1"}' | curl -iX POST -d @- http://localhost:8080/v1/texts/corpus/4 --user user@example.com:myPassword  

	
	/texts/corpus/import/[corpus_id]
	POST, import texts to corpus. Imported files can be zip, tar, tar.gz, word, pdf, or txt.
		curl -iX POST -F "file=@plain_text.txt" http://localhost:8080/v1/texts/import/4 --user user@example.com:myPassword
	
	/texts/id/[id]
	GET, gets the text
		curl -iX GET http://localhost:8080/v1/texts/id/4 --user user@example.com:myPassword
		
	PUT, changes the text
		echo '{"title": "updated title", "tagId": 9, "content": "updated Content"}' | curl -iX PUT -d @- http://localhost:8080/v1/texts/id/4 --user user@example.com:myPassword

	DELETE, removes a text
		curl -iX DELETE http://localhost:8080/v1/texts/id/4 --user user@example.com:myPassword
	
	/texts/tag/[tagid]
	GET, gets a list of texts with a certain tag
		curl -iX GET http://localhost:8080/v1/texts/tag/10 --user user@example.com:myPassword
		
	POST, tags the posted texts with the tag
	    echo '[{"id": 12}, {"id": 13}, {"id": 14}]' | curl -iX POST -d @- http://localhost:8080/v1/texts/tag/10 --user user@example.com:myPassword
	    
	DELETE, removes tags for texts
		echo '[{"id": 12}, {"id": 13}, {"id": 14}]' | curl -iX DELETE -d @- http://localhost:8080/v1/texts/tag/10 --user user@example.com:myPassword

Measure Category Operations
	/categories/
	GET, gets a list of categories
		curl -i -X GET http://localhost:8080/v1/categories/ 
	
	/categories/language/[language]
	GET, gets a list of categories of the specified language
		curl -i -X GET http://localhost:8080/v1/categories/language/en 
	
Measure Operations
	/measures/
	GET, gets a list of measures
		curl -i -X GET http://localhost:8080/v1/measures/ 
	
	/measures/category/[category_id]
	GET, gets a list of measures of certain category
		curl -i -X GET http://localhost:8080/v1/measures/category/1
	
	/measures/language/[language]
	GET, gets a list of measures of certain language
		curl -i -X GET http://localhost:8080/v1/measures/language/en

Feature Set Operations
	/feature_sets/
	GET, lists information of all feature sets, requires user authentication
		curl -i -X GET http://localhost:8080/v1/feature_sets/ --user user@example.com:myPassword

	POST, creates a new feature set, returns a link to it
		echo '{"name": "feature set 1", "description": "description of feature set 1"}' | curl -iX POST -d @- http://localhost:8080/v1/feature_sets/ --header "Content-Type:application/json" --user user@example.com:myPassword
		
	PUT, updates the feature set info (name, description)
		echo '{"id": 1, "name": "new feature set 1 name", "description": "new description of feature set 1"}' | curl -i -X PUT -d @- http://localhost:8080/v1/feature_sets/ --user user@example.com:myPassword
		
	DELETE, deletes feature sets
		echo '[{"id": 1}]' | curl -i -X DELETE -d @- http://localhost:8080/v1/feature_sets/ --user user@example.com:myPassword
	
	/feature_sets/[id]: dispatched to /feature_sets/id/[id]
	GET, gets info of a specific feature set
		curl -i -X GET http://localhost:8080/v1/feature_sets/2 --user user@example.com:myPassword
	
	PUT, change the feature set info: name, description
		echo '{"name": "new feature set 1 name", "description": "new feature set description of 1"}' | curl -i -X PUT -d @- http://localhost:8080/v1/feature_sets/1 --user user@example.com:myPassword

	DELETE, remove the feature set
		curl -i -X DELETE http://localhost:8080/v1/feature_sets/2 --user user@example.com:myPassword
	
Feature set measure operations:
	/fs_me/feature_set/[id]
	GET, lists the measures in a feature set
		curl -i -X GET http://localhost:8080/v1/fs_me/feature_set/1 --user user@example.com:myPassword


	POST, adds new measures to a feature set, returns a list of all the measures in the feature set
		echo '[{"id": 7}]' | curl -iX POST -d @- http://localhost:8080/v1/fs_me/feature_set/3 --user user@example.com:myPassword	
		echo '[{"id": 7}, {"id": 8}]' | curl -iX POST -d @- http://localhost:8080/v1/fs_me/feature_set/3 --user user@example.com:myPassword	

	DELETE, removes measures from feature set
		echo '[{"id": 7}]' | curl -iX DELETE -d @- http://localhost:8080/v1/fs_me/feature_set/3 --user user@example.com:myPassword	
	
Analysis operations:
	/analyses/
	GET, lists information of all analyses, requires user authentication
		curl -i -X GET http://localhost:8080/v1/analyses/ --user user@example.com:myPassword

	POST, creates a new analysis, returns a link to it
		echo '{"name": "analysis 1", "description": "description of analysis 1", "corpusId": 1, "featureSetId": 1}' | curl -iX POST -d @- http://localhost:8080/v1/analyses/ --header "Content-Type:application/json" --user user@example.com:myPassword
		
	PUT, updates the analysis info (name, description, corpus_id, featureset_id)
		echo '{"id": 1, "name": "new analysis 1 name", "description": "new analysis description 1", "corpusId": 1, "featureSetId": 2}' | curl -i -X PUT -d @- http://localhost:8080/v1/analyses/ --user user@example.com:myPassword
		
	DELETE, deletes some analyses
		echo '[{"id": 1}]' | curl -i -X DELETE -d @- http://localhost:8080/v1/analyses/ --user user@example.com:myPassword
	
	/analyses/[id]: dispatched to /analyses/id/[id]
	GET, gets info of a specific analysis
		curl -i -X GET http://localhost:8080/v1/analyses/2 --user user@example.com:myPassword
	
	PUT, updates the analysis info (name, description, corpus_id, featureset_id, status)
		echo '{"name": "new analysis 1 name", "description": "new analysis description 1", "corpusId": 1, "featureSetId": 2}' | curl -i -X PUT -d @- http://localhost:8080/v1/analyses/3 --user user@example.com:myPassword

	DELETE, remove the analysis
		curl -i -X DELETE http://localhost:8080/v1/analyses/2 --user user@example.com:myPassword
	
	/analyses/status/[analysisId]
	PUT, switches runnning status of the analysis. If the status is "running", stop it and the status becomes "stopped". If it is "stopped", start running the analysis and change the status to "running". 
		curl -i -X PUT http://localhost:8080/v1/analyses/status/4 --user user@example.com:myPassword
	
Result operations:
	/results/analysis/[analysisId]
	GET, gets results of an analysis
		curl -i -X GET http://localhost:8080/v1/results/analysis/2 --user user@example.com:myPassword
	
	/results/text/[textId]
	GET, gets results of a text
	
	/results/tag/[tagId]
	GET, gets results of texts tagged with a certain tag
	
	
	
	
	
	
	
	
	
	
	
	
	






